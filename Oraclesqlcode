-- Create the Students table
CREATE TABLE Students (
    StudentID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    FirstName VARCHAR2(50),
    LastName VARCHAR2(50),
    DOB DATE,
    Gender VARCHAR2(10),
    Email VARCHAR2(100),
    PhoneNumber VARCHAR2(15),
    Address VARCHAR2(200),
    PRIMARY KEY (StudentID)
);

-- Create the Courses table
CREATE TABLE Courses (
    CourseID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    CourseName VARCHAR2(100),
    Credits NUMBER(2),
    PRIMARY KEY (CourseID)
);

-- Create the Departments table
CREATE TABLE Departments (
    DepartmentID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    DepartmentName VARCHAR2(100),
    PRIMARY KEY (DepartmentID)
);

-- Create the Professors table
CREATE TABLE Professors (
    ProfessorID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    FirstName VARCHAR2(50),
    LastName VARCHAR2(50),
    DepartmentID NUMBER,
    Email VARCHAR2(100),
    PhoneNumber VARCHAR2(15),
    PRIMARY KEY (ProfessorID),
    FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID)
);

-- Create the Enrollment table
CREATE TABLE Enrollment (
    EnrollmentID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    StudentID NUMBER,
    CourseID NUMBER,
    EnrollmentDate DATE,
    Grade CHAR(2),
    PRIMARY KEY (EnrollmentID),
    FOREIGN KEY (StudentID) REFERENCES Students(StudentID),
    FOREIGN KEY (CourseID) REFERENCES Courses(CourseID)
);

-- Create the CourseAssignments table
CREATE TABLE CourseAssignments (
    AssignmentID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    CourseID NUMBER,
    ProfessorID NUMBER,
    Semester VARCHAR2(10),
    Year NUMBER(4),
    PRIMARY KEY (AssignmentID),
    FOREIGN KEY (CourseID) REFERENCES Courses(CourseID),
    FOREIGN KEY (ProfessorID) REFERENCES Professors(ProfessorID)
);


-- Insert sample data into Departments
INSERT INTO Departments (DepartmentName) VALUES ('Computer Science');
INSERT INTO Departments (DepartmentName) VALUES ('Mathematics');
INSERT INTO Departments (DepartmentName) VALUES ('Physics');

-- Insert sample data into Professors
INSERT INTO Professors (FirstName, LastName, DepartmentID, Email, PhoneNumber) VALUES ('John', 'Doe', 1, 'johndoe@university.edu', '123-456-7890');
INSERT INTO Professors (FirstName, LastName, DepartmentID, Email, PhoneNumber) VALUES ('Jane', 'Smith', 2, 'janesmith@university.edu', '123-456-7891');

-- Insert sample data into Courses
INSERT INTO Courses (CourseName, Credits) VALUES ('Database Systems', 4);
INSERT INTO Courses (CourseName, Credits) VALUES ('Algorithms', 3);
INSERT INTO Courses (CourseName, Credits) VALUES ('Quantum Mechanics', 4);

-- Insert sample data into Students
INSERT INTO Students (FirstName, LastName, DOB, Gender, Email, PhoneNumber, Address) VALUES ('Alice', 'Johnson', TO_DATE('1998-06-15', 'YYYY-MM-DD'), 'Female', 'alice.johnson@university.edu', '123-456-7892', '123 Main St');
INSERT INTO Students (FirstName, LastName, DOB, Gender, Email, PhoneNumber, Address) VALUES ('Bob', 'Williams', TO_DATE('1999-08-22', 'YYYY-MM-DD'), 'Male', 'bob.williams@university.edu', '123-456-7893', '456 Elm St');

-- Insert sample data into Enrollment
INSERT INTO Enrollment (StudentID, CourseID, EnrollmentDate, Grade) VALUES (1, 1, SYSDATE, 'A');
INSERT INTO Enrollment (StudentID, CourseID, EnrollmentDate, Grade) VALUES (1, 2, SYSDATE, 'B');
INSERT INTO Enrollment (StudentID, CourseID, EnrollmentDate, Grade) VALUES (2, 3, SYSDATE, 'A');

-- Insert sample data into CourseAssignments
INSERT INTO CourseAssignments (CourseID, ProfessorID, Semester, Year) VALUES (1, 1, 'Fall', 2023);
INSERT INTO CourseAssignments (CourseID, ProfessorID, Semester, Year) VALUES (2, 1, 'Spring', 2024);
INSERT INTO CourseAssignments (CourseID, ProfessorID, Semester, Year) VALUES (3, 2, 'Fall', 2023);


SELECT s.FirstName, s.LastName
FROM Students s
JOIN Enrollment e ON s.StudentID = e.StudentID
WHERE e.CourseID = 1;



SELECT c.CourseName
FROM Courses c
JOIN CourseAssignments ca ON c.CourseID = ca.CourseID
JOIN Professors p ON ca.ProfessorID = p.ProfessorID
WHERE p.DepartmentID = 1;


SELECT c.CourseName, e.Grade
FROM Courses c
JOIN Enrollment e ON c.CourseID = e.CourseID
WHERE e.StudentID = 1;


CREATE OR REPLACE PROCEDURE EnrollStudent (
    p_StudentID IN NUMBER,
    p_CourseID IN NUMBER,
    p_EnrollmentDate IN DATE
) AS
BEGIN
    INSERT INTO Enrollment (StudentID, CourseID, EnrollmentDate)
    VALUES (p_StudentID, p_CourseID, p_EnrollmentDate);
END;




CREATE OR REPLACE PROCEDURE AssignProfessor (
    p_CourseID IN NUMBER,
    p_ProfessorID IN NUMBER,
    p_Semester IN VARCHAR2,
    p_Year IN NUMBER
) AS
BEGIN
    INSERT INTO CourseAssignments (CourseID, ProfessorID, Semester, Year)
    VALUES (p_CourseID, p_ProfessorID, p_Semester, p_Year);
END;


CREATE OR REPLACE TRIGGER trg_check_enrollment
BEFORE INSERT ON Enrollment
FOR EACH ROW
DECLARE
    v_count NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_count
    FROM Enrollment
    WHERE StudentID = :NEW.StudentID;
    
    IF v_count >= 5 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Student cannot be enrolled in more than 5 courses.');
    END IF;
END;



CREATE OR REPLACE TRIGGER trg_update_grade
AFTER UPDATE OF Grade ON Enrollment
FOR EACH ROW
BEGIN
    -- Perform necessary actions upon grade update, such as logging or updating other tables
    DBMS_OUTPUT.PUT_LINE('Grade updated for StudentID: ' || :NEW.StudentID);
END;




-- Update a student's email address
UPDATE Students
SET Email = 'newemail@university.edu'
WHERE StudentID = 1;




-- Update course credits
UPDATE Courses
SET Credits = 5
WHERE CourseID = 1;




-- Delete a student and their enrollment records
DELETE FROM Enrollment
WHERE StudentID = 1;

DELETE FROM Students
WHERE StudentID = 1;



-- Delete a course assignment
DELETE FROM CourseAssignments
WHERE AssignmentID = 1;



CREATE OR REPLACE PROCEDURE DropStudentFromCourse (
    p_StudentID IN NUMBER,
    p_CourseID IN NUMBER
) AS
BEGIN
    DELETE FROM Enrollment
    WHERE StudentID = p_StudentID
    AND CourseID = p_CourseID;
    
    DBMS_OUTPUT.PUT_LINE('Student dropped from course successfully.');
END;



